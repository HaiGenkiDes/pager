#!/usr/bin/env python

#stdlib imports
import argparse
import sys
import os.path
from urllib.parse import urlparse
from datetime import datetime

#local imports
from losspager.schema import emailschema
from losspager.utils.config import read_mail_config
from losspager.utils.datapath import get_data_path

#third party imports
from sqlalchemy import func
import pandas as pd
import numpy as np

FORMATS = ['short','long','pdf']
DEFAULT_MAG = 7.0
DEFAULT_EIS = 'yellow'
DEFAULT_MMI = 7.0

GLOBAL_FEMA_MAG = 6.0
GLOBAL_FEMA_MMI = 7.0
GLOBAL_FEMA_EIS = 'yellow'

US_FEMA_MAG = 4.5
US_FEMA_EIS = 'yellow'

DEFAULT_PRIORITY = 10

USERFILE = 'pager_users.xlsx'

TIMEFMT = '%Y%m%d%H%M%S'

def sync_db(session,config):
    statsfolder = config['stats_folder']
    userfile = os.path.join(statsfolder,USERFILE)
    print('Syncing database to %s...' % userfile)
    users = session.query(emailschema.User).all()
    columns = ['LastName','FirstName','CreatedDate','Organization',
               'PrimaryEmail','PrimaryFormat','Priority','PrimaryMMI',
               'PrimaryMag','PrimaryEIS']
    df = pd.DataFrame(columns=columns)
    for user in users:
        primary_email = user.addresses[0].email
        priority = user.addresses[0].priority
        mmi_threshold = np.nan
        mag_threshold = np.nan
        eis_threshold = None
        for address in user.addresses:
            if address.is_primary:
                priority = address.priority
                primary_email = address.email
                primary_format = address.format
                for profile in address.profiles:
                    for threshold in profile.thresholds:
                        if threshold.alertscheme.name == 'mmi':
                            mmi_threshold = threshold.value
                        if threshold.alertscheme.name == 'mag':
                            mag_threshold = threshold.value
                        if threshold.alertscheme.name == 'eis':
                            eis_threshold = threshold.value
        d = {'LastName':user.lastname,
             'FirstName':user.firstname,
             'CreatedDate':user.createdon,
             'Organization':user.organization.shortname,
             'PrimaryEmail':primary_email,
             'PrimaryFormat':primary_format,
             'Priority':priority,
             'PrimaryMMI':mmi_threshold,
             'PrimaryMag':mag_threshold,
             'PrimaryEIS':eis_threshold}
        row = pd.Series(data=d,index=None)
        df = df.append(row,ignore_index=True)
    df.to_excel(userfile)

def validate_mag(magstr):
    mag = None
    if magstr == '':
        return DEFAULT_MAG
    try:
        mag = float(magstr)
    except ValueError:
        pass
    return mag

def validate_mmi(mmistr):
    mmi = None
    if mmistr == '':
        return DEFAULT_MMI
    try:
        mmi = float(mmistr)
    except ValueError:
        pass
    return mmi

def print_user(user):
    status = {True:'primary',False:'not primary'}
    indent = '  '
    udesc = ''
    udesc += 'Name: %s %s\n' % (user.firstname,user.lastname)
    udesc += '%sOrganization: %s\n' % (indent,user.organization.name)
    udesc += '%sCreated on: %s\n' % (indent,user.createdon)
    udesc += '%sAddresses:\n'% (indent)
    for address in user.addresses:
        udesc += '%sEmail: %s\n' % (indent*2,address.email)
        udesc += '%sFormat: %s\n' % (indent*2,address.format)
        udesc += '%sPriority: %i\n' % (indent*2,address.priority)
        udesc += '%sStatus: %s\n' % (indent*2,status[address.is_primary])
        
        udesc += '%sProfiles:\n' % (indent*2)
        for profile in address.profiles:
            if len(profile.regions):
                udesc += '%sRegions:\n' % (indent*3)
            else:
                udesc += '%sRegions: Global\n' % (indent*3)
            for region in profile.regions:
                udesc += '%s%s\n' % (indent*4,region.name)
            udesc += '%sThresholds:\n' % (indent*3)
            for threshold in profile.thresholds:
                udesc += '%s%s:%s\n' % (indent*4,threshold.alertscheme.name,str(threshold.value))
    return udesc
            

def add_address(session,user,email=None):
    is_primary = True
    if email is None:
        address_prompt = 'Enter an email address for this user (or enter to stop adding addresses): '
        email = input(address_prompt).strip()
        is_primary = False
        
    if email != '':
        address = emailschema.Address()
        address.email = email
        if not is_primary:
            prim_resp = input("Is this email the user's primary address yes/[no]?").strip()
            address.is_primary = True
            if prim_resp == '':
                address.is_primary = False
        else:
            address.is_primary = is_primary
        pri_resp = input("Enter an integer priority for this address [%i] " % DEFAULT_PRIORITY)
        if pri_resp == '':
            pri_resp = '%i' % DEFAULT_PRIORITY
        try:
            address.priority = int(pri_resp)
        except Exception as e:
            print('Priority must be an integer.  Exiting.')
            sys.exit(1)
        format_resp = input("What email format should this address get [short]/long/pdf? ").strip()
        if format_resp == '':
            format_resp = 'short'
        if format_resp not in FORMATS:
            print('Format must be one of %s.  Exiting.' % str(FORMATS))
            sys.exit(1)
        address.format = 'short'
        if format_resp != '':
            address.format = format_resp
        do_profile = True
        print('Gathering profile information...')
        while do_profile:
            profile = add_profile(session,address)
            address.profiles.append(profile)
            address.profiles.append(profile)
            more_profiles = input('Do you need to add another profile [no]/yes? ').strip()
            if more_profiles == '':
                do_profile = False
            else:
                do_profile = True
    else:
        address = None
    return address

def add_threshold(session,profile,scheme):
    threshold = None
    scheme_prompt = 'Should this profile use a %s threshold[no]/yes? ' % scheme.name
    scheme_answer = input(scheme_prompt)
    if scheme_answer == '':
        return None
    if scheme.name == 'mag':
        mag_answer = input('Enter the magnitude threshold (0-9.9)[%.1f]: ' % DEFAULT_MAG)
        mag = validate_mag(mag_answer)
        if mag is None:
            print('Invalid magnitude. Exiting.')
            sys.exit(1)
        mag_threshold = emailschema.Threshold()
        mag_threshold.alertscheme = scheme
        mag_threshold.value = mag
        return mag_threshold
    elif scheme.name == 'eis':
        eis_answer = input('Enter the EIS threshold (green,yellow,orange,red)[%s]: ' % DEFAULT_EIS)
        if eis_answer == '':
            eis_answer = DEFAULT_EIS
        if eis_answer not in ['green','yellow','orange','red']:
            print('Invalid EIS threshold. Exiting.')
            sys.exit(1)
        eis_threshold = emailschema.Threshold()
        eis_threshold.alertscheme = scheme
        eis_threshold.value = eis_answer
        return eis_threshold
    elif scheme.name == 'mmi':
        mmi_answer = input('Choose the MMI threshold (0-10)[%.1f]: ' % DEFAULT_MMI)
        mmi = validate_mmi(mmi_answer)
        if mmi is None:
            print('Invalid MMI value. Exiting')
            sys.exit(1)
        mmi_threshold = emailschema.Threshold()
        mmi_threshold.alertscheme = scheme
        mmi_threshold.value = mmi
        return mmi_threshold
    return threshold

def add_profile(session,address):
    schemes = session.query(emailschema.AlertScheme).all()
    region_groups = session.query(emailschema.RegionGroup).all()
    profile = emailschema.Profile()
    profile.thresholds = []
    for scheme in schemes:
        threshold = add_threshold(session,profile,scheme)
        if threshold is None:
            continue
        profile.thresholds.append(threshold)
            
    for region_group in region_groups:
        group_prompt = 'Would you like to select a region from %s[no]/yes? ' % region_group.groupname
        group_answer = input(group_prompt).strip()
        if group_answer == '':
            continue
        gid = region_group.id
        regions = session.query(emailschema.Region).filter(emailschema.Region.regiongroup_id == gid).order_by(emailschema.Region.name).all()
        for region in regions:
            region_prompt = 'Use region %s [no]/yes? ' % region.name
            region_answer = input(region_prompt).strip()
            if region_answer == '':
                continue
            profile.regions.append(region)
    return profile

def add_user(session):
    email_prompt = "Enter the user's primary email address: "
    primary_email = input(email_prompt)

    tuser = check_user(session,primary_email,'null')
    if tuser is not None:
        res = False
        msg = 'User already exists in the database.\n%s' % (print_user(tuser))
        return (res,msg)
    
    name_prompt = "Enter the user's first and last name, separated by spaces: "
    username = input(name_prompt)
    first,last = username.split()
    org_prompt = "Enter the user's organization (short name, can be lower case): "
    org_short = input(org_prompt).lower()
    org = session.query(emailschema.Organization).filter(func.lower(emailschema.Organization.shortname)==org_short).first()
    if org is None:
        msg = 'Could not find an organization called %s.  Add using --add-org.' % org_short
        return (False,msg)
    user = emailschema.User()
    user.lastname = last
    user.firstname = first
    user.createdon = datetime.utcnow()
    user.organization = org

    address = add_address(session,user,email=primary_email)
    user.addresses.append(address)
    
    do_address = True
    while do_address:
        address = add_address(session,user)
        if address is None:
            break
        user.addresses.append(address)
        
    session.commit()
    msg = 'The user %s has now been entered in the database.' % (print_user(user))
    return (True,msg)

def init_db(db_url,session,userfile=None,orgfile=None):
    resp = input('Are you sure to want to re-create the database? [No]/Yes ')
    if resp != 'Yes':
        print('That was a No.  Exiting.')
        sys.exit(0)

    #Before we nuke everything, let's at least back up the list of users
    #create a time-stamped json file in the directory where the sqlite file lives.
    urlparts = urlparse(db_url)
    sqlite_path = os.path.abspath(urlparts.path)
    schemadir,sqlite_file = os.path.split(sqlite_path)
    nowstr = datetime.utcnow().strftime(TIMEFMT)
    user_backup = os.path.join(schemadir,'%s_users.json' % nowstr)
    print('Saving user profiles to %s.' % user_backup)
    emailschema.serialize_users(session,user_backup)
    session.close()
        
    jsondir = get_data_path('schema')
    session = emailschema.create_db(db_url,jsondir,users_jsonfile=userfile,
                                    orgs_jsonfile=orgfile)
    session.close()
    return (True,'Database created successfully.')    

def get_threshold(session,scheme_name,value):
    scheme = session.query(emailschema.AlertScheme).filter(emailschema.AlertScheme.name==scheme_name).first()
    threshold = emailschema.Threshold()
    threshold.alertscheme = scheme
    threshold.value = value
    return threshold

def check_user(session,email,sms):
    address = session.query(emailschema.Address).filter(emailschema.Address.email==email).first()
    if address is not None:
        return address.user
    if sms != 'null':
        address = session.query(emailschema.Address).filter(emailschema.Address.email==sms).first()
        if address is not None:
            return address.user
    return None

def add_fema(session,fema_user):
    firstname = fema_user[0]
    lastname = fema_user[1]
    email = fema_user[2]
    sms = fema_user[3]
    tuser = check_user(session,email,sms)
    if tuser is not None:
        res = False
        msg = 'User already exists in the database.\n%s' % (print_user(tuser))
        return (res,msg)
    region_names = []
    if len(fema_user) > 4:
        region_names = fema_user[4:]
    org = session.query(emailschema.Organization).filter(emailschema.Organization.shortname=='FEMA').first()
    user = emailschema.User()
    user.lastname = lastname
    user.firstname = firstname
    user.createdon = datetime.utcnow()
    user.organization = org
    address1 = emailschema.Address(email=email,is_primary=True,priority=DEFAULT_PRIORITY,format='pdf')
    address1.user = user

    #Create the default thresholds
    global_thresholds1,us_thresholds1 = get_fema_thresholds(session)
    
    #Add thresholds and regions to primary email profile
    profile1 = emailschema.Profile()
    profile1.thresholds.append(global_thresholds1[0])
    profile1.thresholds.append(global_thresholds1[1])
    profile1.thresholds.append(global_thresholds1[2])

    profile2 = emailschema.Profile()
    profile2.thresholds.append(us_thresholds1[0])
    profile2.thresholds.append(us_thresholds1[1])

    for region_name in region_names:
        region = session.query(emailschema.Region).filter(emailschema.Region.name=='US_Terr').first()
        profile2.regions.append(region)
    address1.profiles.append(profile1)
    address1.profiles.append(profile2)

    #Create an Address for SMS (if provided)
    if sms != 'null':
        address2 = emailschema.Address(email=sms,is_primary=False,priority=DEFAULT_PRIORITY,format='short')
        address2.user = user

        #Add thresholds and regions to SMS email profile
        global_thresholds2,us_thresholds2 = get_fema_thresholds(session)
        #Create the default thresholds
        profile3 = emailschema.Profile()
        profile3.thresholds.append(global_thresholds2[0])
        profile3.thresholds.append(global_thresholds2[1])
        profile3.thresholds.append(global_thresholds2[2])

        profile4 = emailschema.Profile()
        profile4.thresholds.append(us_thresholds2[0])
        profile4.thresholds.append(us_thresholds2[1])

        region = session.query(emailschema.Region).filter(emailschema.Region.name=='US_Terr').first()
        profile4.regions.append(region)
            
        address2.profiles.append(profile3)
        address2.profiles.append(profile4)
    session.commit()
    return (True,'Added user to database:\n%s' % (print_user(user)))

def get_fema_thresholds(session):
    mmi_threshold_global = get_threshold(session,'mmi',GLOBAL_FEMA_MMI)
    mag_threshold_global = get_threshold(session,'mag',GLOBAL_FEMA_MAG)
    eis_threshold_global = get_threshold(session,'eis',GLOBAL_FEMA_EIS)

    mag_threshold_us = get_threshold(session,'mag',US_FEMA_MAG)
    eis_threshold_us = get_threshold(session,'eis',US_FEMA_EIS)

    globals_thresholds = [mmi_threshold_global,mag_threshold_global,eis_threshold_global]
    us_thresholds = [mag_threshold_us,eis_threshold_us]
    
    return (globals_thresholds,us_thresholds)

def add_generic(session,generic_user):
    org = generic_user[0]
    firstname = generic_user[1]
    lastname = generic_user[2]
    email = generic_user[3]
    sms = generic_user[4]
    tuser = check_user(session,email,sms)
    if tuser is not None:
        res = False
        msg = 'User already exists in the database.\n%s' % (print_user(tuser))
        return (res,msg)
    region_names = []
    if len(generic_user) > 5:
        region_names = generic_user[5:]
    org = session.query(emailschema.Organization).filter(emailschema.Organization.shortname==org).first()
    user = emailschema.User()
    user.lastname = lastname
    user.firstname = firstname
    user.createdon = datetime.utcnow()
    user.organization = org
    address1 = emailschema.Address(email=email,is_primary=True,priority=DEFAULT_PRIORITY,format='pdf')
    address1.user = user

    #Create the default thresholds
    mmi_threshold1 = get_threshold(session,'mmi',DEFAULT_MMI)
    mag_threshold1 = get_threshold(session,'mag',DEFAULT_MAG)
    eis_threshold1 = get_threshold(session,'eis',DEFAULT_EIS)

    #Add thresholds and regions to primary email profile
    profile1 = emailschema.Profile()
    profile1.thresholds.append(mmi_threshold1)
    profile1.thresholds.append(mag_threshold1)
    profile1.thresholds.append(eis_threshold1)
    for region_name in region_names:
        region = session.query(emailschema.Region).filter(emailschema.Region.name==region_name).first()
        profile1.regions.append(region)
    address1.profiles.append(profile1)

    #Create an Address for SMS (if provided)
    if sms != 'null':
        address2 = emailschema.Address(email=sms,is_primary=False,priority=DEFAULT_PRIORITY,format='short')
        address2.user = user

        #Add thresholds and regions to SMS email profile
        #Create the default thresholds
        mmi_threshold2 = get_threshold(session,'mmi',DEFAULT_MMI)
        mag_threshold2 = get_threshold(session,'mag',DEFAULT_MAG)
        eis_threshold2 = get_threshold(session,'eis',DEFAULT_EIS)
        profile2 = emailschema.Profile()
        profile2.thresholds.append(mmi_threshold2)
        profile2.thresholds.append(mag_threshold2)
        profile2.thresholds.append(eis_threshold2)
        for region_name in region_names:
            region = session.query(emailschema.Region).filter(emailschema.Region.name==region_name).first()
            profile2.regions.append(region)
        address2.profiles.append(profile2)
    session.commit()
    return (True,'Added user to database:\n%s' % (print_user(user)))

def delete_user(session,lastname):
    lastname = lastname.strip().lower()
    users = session.query(emailschema.User).filter(func.lower(emailschema.User.lastname)==lastname).all()
    if len(users) == 1:
        udesc = '%s %s from %s (%s)' % (users[0].firstname,users[0].lastname,
                                        users[0].organization.shortname,users[0].addresses[0].email)
        resp = input('One user found: %s.  Are you sure you want to delete? [N]/Y? ' % udesc)
        if resp.strip() == '' or resp.strip() == 'N':
            res = False
            msg = 'You declined to delete a user.'
        elif resp == 'Y':
            session.delete(users[0])
            session.commit()
            res = True
            msg = 'One user deleted.'
    elif len(users) == 0:
        res = False
        msg = 'No users found with that last name.'
    else:
        print('Users matching %s:' % lastname)
        for user in users:
            udesc = '%s %s from %s (%s)' % (user.firstname,user.lastname,
                                            user.organization.shortname,user.addresses[0].email)
            resp = input('%s.  Is this the user you want to delete? [N]/Y? ' % udesc)
            if resp.strip() == '' or resp.strip() == 'N':
                res = False
                msg = 'You declined to delete a user.'
            elif resp == 'Y':
                session.delete(user)
                session.commit()
                res = True
                msg = 'One user deleted.'
                break
    return (res,msg)

def main(args):
    config = read_mail_config()
    dburl = config['email']['database']['url']
    create = False
    parts = urlparse(dburl)
    dbfile = parts.path[1:]
    if not os.path.isfile(dbfile):
        create = True
    session = emailschema.get_session(url=dburl,create_db=create)

    do_sync = False

    if args.init_db:
        if len(args.init_db) >= 1:
            userfile = args.init_db[0]
        if len(args.init_db) >= 2:
            orgfile = args.init_db[1]
        res,msg = init_db(dburl,session,userfile=userfile,orgfile=orgfile)
        do_sync = True
    
    if args.add_user:
        res,msg = add_user(session)
        do_sync = True

    if args.delete_user:
        res,msg = delete_user(session,args.delete_user)
        do_sync = True

    if args.add_generic:
        if len(args.add_generic) < 5:
            msg = 'add_generic required fields: Org FirstName LastName PrimaryEmail SMSEmail (or "null"). Exiting.'
            res = False
        else:
            res,msg = add_generic(session,args.add_generic)
            do_sync = True

    if args.add_fema:
        if len(args.add_fema) < 4:
            msg = 'add_generic required fields: FirstName LastName PrimaryEmail SMSEmail (or "null"). Exiting.'
            res = False
        else:
            res,msg = add_fema(session,args.add_fema)
            do_sync = True
    
    if args.add_org:
        shortname = args.add_org[0]
        longname = ' '.join(args.add_org[1:])
        org = emailschema.Organization(name=longname,shortname=shortname)
        session.add(org)
        session.commit()
        msg = 'Organization %s has been added to the database.' % org
        res = True
        do_sync = True

    if args.list_orgs:
        orgs = session.query(emailschema.Organization).all()
        for org in orgs:
            print('%-40s (%s)' % (org.name,org.shortname))
        res = True
        msg = ''

    if args.list_region_groups:
        groups = session.query(emailschema.RegionGroup).all()
        for group in groups:
            print('%-40s' % (group.groupname))
        res = True
        msg = ''

    if args.list_regions:
        groupname = args.list_regions
        regiongroup = session.query(emailschema.RegionGroup).filter(emailschema.RegionGroup.groupname == groupname).first()
        gid = regiongroup.id
        regions = session.query(emailschema.Region).filter(emailschema.Region.regiongroup_id == gid).all()
        for region in regions:
            print('%-40s %-40s' % (region.name,region.desc))
        res = True
        msg = ''

    if args.list_events is not None:
        start_time = datetime(1900,1,1)
        end_time = datetime.utcnow()
        if len(args.list_events) == 1:
            start_time = datetime.strptime(args.list_events[0])
        if len(args.list_events) > 1:
            end_time = datetime.strptime(args.list_events[1])
        versions = session.query(emailschema.Version).filter(emailschema.Version.time > start_time,emailschema.Version.time > start_time).order_by(emailschema.Version.time)
        newversions = []
        for version in versions:
            newversion = version.event.versions[-1]
            
            

    if args.show_user:
        email = args.show_user
        address = session.query(emailschema.Address).filter(emailschema.Address.email==email).first()
        if address is not None:
            print(print_user(address.user))
            res = True
            msg = ''
        else:
            res = False
            msg = 'No user found for email address %s' % email
        
    if args.list_users:
        org_short = args.list_users
        msg = ''
        if org_short == 'all':
            users = session.query(emailschema.User).all()
            msg = 'There are %i total users.' % len(users)
        else:
            org = session.query(emailschema.Organization).filter(func.lower(emailschema.Organization.shortname)==org_short).first()
            users = org.users
            msg = 'There are %i users from %s.' % (len(users),org_short)
        for user in users:
            print(print_user(user))
        res = True
        

    if res and do_sync:
        sync_db(session,config)

    session.close()
    print(msg)
    if not res:
        sys.exit(1)
    sys.exit(0)

if __name__ == '__main__':
    usage = '''Administer the PAGER email database.
    
    To add a user to the database: 

    %(prog)s --add-user and follow the prompts.
    
    To add a generic (mag 7, mmi 7, eis yellow) USGS user named John Doe with the OFDA region "SWAN"to the database: 

    %(prog)s --add-generic USGS John Doe jdoe@usgs.gov 5555551212@provider.net SWAN

    To add a generic (mag 7, mmi 7, eis yellow) USGS "user" named "USGS Disaster Watch" with no regions (global): 

    %(prog)s --add-generic USGS "USGS" "Disaster Watch" jdoe@usgs.gov 5555551212@provider.net

    (note the quotes around words with spaces.)

    To add a generic FEMA user with 2 addresses, each with two profiles: 
    MMI 7,Mag 6, EIS yellow, global
    Mag 4.5, EIS yellow, US/Terr

    %(prog)s --add-fema Jane Smith jsmith@fema.gov 5555551212@provider.net

    To list all users:

    %(prog)s --list-users all

    To list all users from OFDA:

    %(prog)s --list-users ofda

    To show the user information for Jane Smith (above):
    
    %(prog)s --show-user jsmith@fema.gov
    
    To add an organization:

    %(prog)s --add-org USDW US Disaster Watch

    To list all the region groups:

    %(prog)s --list-region-groups

    To list all of the regions in a given region group:

    %(prog)s --list-regions US_Military_Commands

    To delete a user:

    %(prog)s --delete-user smith (follow the prompts to select the desired user.)
    '''
    argparser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        usage=usage)
    argparser.add_argument("--add-user", action='store_true',default=False,
                           help='Add a user by following prompts.')
    argparser.add_argument("--add-org", nargs='*', 
                           help='Add an organization by entering short name (one word) followed by full name.')
    argparser.add_argument("--list-orgs", action='store_true',default=False,
                           help='Add a user by following prompts.')
    argparser.add_argument("--list-users", metavar='GROUP',
                           help='Print a user summary for all users ("all"), or those from an organization.')
    argparser.add_argument("--show-user", metavar='EMAIL',
                           help='Print a user summary for a given email address.')
    argparser.add_argument("--list-region-groups", action='store_true',default=False,
                           help='List the available region groups.')
    argparser.add_argument("--list-regions", metavar='REGIONGROUP',
                           help='List the regions associated with the given region group.')
    argparser.add_argument("--list-events", nargs='*',
                           help='List the regions associated with the given region group.')
    argparser.add_argument("--add-generic", nargs='*',
                           help='Add a generic user by providing: Org FirstName LastName PrimaryEmail SMSEmail (or "null") [regions].')
    argparser.add_argument("--add-fema", nargs='*',
                           help='Add a FEMA user by providing: FirstName LastName PrimaryEmail SMSEmail (or "null") [regions].')
    argparser.add_argument("--delete-user", 
                           help="Delete a user by providing the user's last name.  If not unique, you will be prompted to select from a list.")
    ihelp = '''Recreate the database file by (optionally) providing JSON user file and
    a JSON org file.
    '''
    argparser.add_argument("--init-db", nargs='*',help=ihelp,metavar=('userfile','orgfile'))
    pargs = argparser.parse_args()
    main(pargs)
    


