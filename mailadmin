#!/usr/bin/env python

#stdlib imports
import argparse
import sys
import os.path
from urllib.parse import urlparse

#local imports
from losspager.schema import emailschema
from losspager.utils.config import read_mail_config
from losspager.utils.datapath import get_data_path

#third party imports
from sqlalchemy import func

FORMATS = ['short','long','pdf']
DEFAULT_MAG = 7.0
DEFAULT_EIS = 'yellow'
DEFAULT_MMI = 7.0

def validate_mag(magstr):
    mag = None
    if magstr == '':
        return DEFAULT_MAG
    try:
        mag = float(magstr)
    except ValueError:
        pass
    return mag

def validate_mmi(mmistr):
    mmi = None
    if mmistr == '':
        return DEFAULT_MMI
    try:
        mmi = float(mmistr)
    except ValueError:
        pass
    return mmi

def print_user(user):
    status = {True:'primary',False:'not primary'}
    indent = '  '
    print('Name: %s %s' % (user.firstname,user.lastname))
    print('%sOrganization: %s' % (indent,user.organization.name))
    print('%sAddresses:'% (indent))
    for address in user.addresses:
        print('%sEmail: %s' % (indent*2,address.email))
        print('%sPriority: %i' % (indent*2,address.priority))
        print('%sStatus: %s' % (indent*2,status[address.is_primary]))
        print('%sProfiles:' % (indent*2))
        for profile in address.profiles:
            print('%sRegions:' % (indent*3))
            for region in profile.regions:
                print('%s%s' % (indent*4,region.name))
            print('%sThresholds:' % (indent*3))
            for threshold in profile.thresholds:
                print('%s%s:%s' % (indent*4,threshold.alertscheme.name,str(threshold.value)))
            

def add_address(session,user):
    address_prompt = 'Enter an email address for this user (or enter to stop adding addresses): '
    email = input(address_prompt).strip()
    if email != '':
        address = emailschema.Address()
        address.email = email
        prim_resp = input("Is this email the user's primary address yes/[no]?").strip()
        address.is_primary = True
        if prim_resp == '':
            address.is_primary = False
        pri_resp = input("Enter an integer priority for this user [0]?")
        if pri_resp == '':
            pri_resp = '0'
        try:
            address.priority = int(pri_resp)
        except Exception as e:
            print('Priority must be an integer.  Exiting.')
            sys.exit(1)
        format_resp = input("What email format should this user get [short]/long/pdf?").strip()
        if format_resp == '':
            format_resp = 'short'
        if format_resp not in FORMATS:
            print('Format must be one of %s.  Exiting.' % str(FORMATS))
            sys.exit(1)
        address.format = 'short'
        if format_resp != '':
            address.format = format_resp
        do_profile = True
        while do_profile:
            profile = add_profile(session,address)
            address.profiles.append(profile)
            address.profiles.append(profile)
            more_profiles = input('Do you need to add another profile [no]/yes? ').strip()
            if more_profiles == '':
                do_profile = False
            else:
                do_profile = True
    else:
        address = None
    return address

def add_threshold(session,profile,scheme):
    threshold = None
    scheme_prompt = 'Should this user use the %s scheme[no]/yes? ' % scheme.name
    scheme_answer = input(scheme_prompt)
    if scheme_answer == '':
        return None
    if scheme.name == 'mag':
        mag_answer = input('Enter the magnitude threshold (0-9.9)[%.1f]: ' % DEFAULT_MAG)
        mag = validate_mag(mag_answer)
        if mag is None:
            print('Invalid magnitude. Exiting.')
            sys.exit(1)
        mag_threshold = emailschema.Threshold()
        mag_threshold.alertscheme = scheme
        mag_threshold.value = mag_answer
        return mag_threshold
    elif scheme.name == 'eis':
        eis_answer = input('Enter the EIS threshold (green,yellow,orange,red)[%s]: ' % DEFAULT_EIS)
        if eis_answer == '':
            eis_answer = DEFAULT_EIS
        if eis_answer not in ['green','yellow','orange','red']:
            print('Invalid EIS threshold. Exiting.')
            sys.exit(1)
        eis_threshold = emailschema.Threshold()
        eis_threshold.alertscheme = scheme
        eis_threshold.value = eis_answer
        return eis_threshold
    elif scheme.name == 'mmi':
        mmi_answer = input('Choose the MMI threshold (0-10)[%.1f]: ' % DEFAULT_MMI)
        mmi = validate_mmi(mmi_answer)
        if mmi is None:
            print('Invalid MMI value. Exiting')
            sys.exit(1)
        mmi_threshold = emailschema.Threshold()
        mmi_threshold.alertscheme = scheme
        mmi_threshold.value = mmi
        return mmi_threshold
    return threshold

def add_profile(session,address):
    schemes = session.query(emailschema.AlertScheme).all()
    region_groups = session.query(emailschema.RegionGroup).all()
    profile = emailschema.Profile()
    for scheme in schemes:
        threshold = add_threshold(session,profile,scheme)
        if threshold is None:
            break
        profile.thresholds.append(threshold)
            
    for region_group in region_groups:
        group_prompt = 'Would you like to select a region from %s[no]/yes? ' % region_group.groupname
        group_answer = input(group_prompt).strip()
        if group_answer == '':
            continue
        gid = region_group.id
        regions = session.query(emailschema.Region).filter(emailschema.Region.regiongroup_id == gid).all()
        for region in regions:
            region_prompt = 'Use region %s [no]/yes? ' % region.name
            region_answer = input(region_prompt).strip()
            if region_answer == '':
                continue
            profile.regions.append(region)
    return profile

def add_user(session):
    name_prompt = "Enter the user's first and last name, separated by spaces: "
    username = input(name_prompt)
    first,last = username.split()
    org_prompt = "Enter the user's organization (short name): "
    org_short = input(org_prompt).lower()
    org = session.query(emailschema.Organization).filter(func.lower(emailschema.Organization.shortname)==org_short).first()
    if org is None:
        msg = 'Could not find an organization called %s.  Add using --add-org.' % org_short
        return (False,msg)
    user = emailschema.User(last,first)
    user.organization = org
    
    do_address = True
    while do_address:
        address = add_address(session,user)
        if address is None:
            break
        user.addresses.append(address)
        
    session.commit()
    msg = 'The user %s has now been entered in the database.' % user
    return (True,msg)

def init_db(db_url):
    jsonfile = get_data_path('mail_init.json')
    session = emailschema.create_db(db_url,jsonfile,create_db=True)
    session.close()
    return (True,'Empty database created successfully.')    
    
def main(args):
    config = read_mail_config()
    dburl = config['email']['database']['url']
    create = False
    parts = urlparse(dburl)
    dbfile = parts.path[1:]
    if not os.path.isfile(dbfile):
        create = True
    session = emailschema.get_session(url=dburl,create_db=create)

    if args.init_db:
        res,msg = init_db(dburl)
    
    if args.add_user:
        res,msg = add_user(session)
    
    if args.add_org:
        shortname = args.add_org[0]
        longname = ' '.join(args.add_org[1:])
        org = emailschema.Organization(name=longname,shortname=shortname)
        session.add(org)
        session.commit()
        msg = 'Organization %s has been added to the database.' % org
        res = True

    if args.list_orgs:
        orgs = session.query(emailschema.Organization).all()
        for org in orgs:
            print('%-40s (%s)' % (org.name,org.shortname))
        res = True
        msg = ''

    if args.list_users:
        users = session.query(emailschema.User).all()
        for user in users:
            print_user(user)
        res = True
        msg = ''

    session.close()
    print(msg)
    if not res:
        sys.exit(1)
    sys.exit(0)

if __name__ == '__main__':
    #--add-user Prompts for all user, address, profile information
    #--add-generic org last first email1 email2...
    desc='Administer the PAGER email database.'
    usage = '''
    To add a user to the database: "%(prog)s --add-user"
    '''
    argparser = argparse.ArgumentParser(description=desc,
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        usage=usage)
    argparser.add_argument("--add-user", action='store_true',default=False,
                           help='Add a user by following prompts.')
    argparser.add_argument("--add-org", nargs='*', 
                           help='Add an organization by entering short name (one word) followed by full name.')
    argparser.add_argument("--list-orgs", action='store_true',default=False,
                           help='Add a user by following prompts.')
    argparser.add_argument("--list-users", action='store_true',default=False,
                           help='Add a user by following prompts.')
    argparser.add_argument("--init-db", action='store_true',default=False,
                           help='Recreate the database file.  Mostly used for debugging.')
    pargs = argparser.parse_args()
    main(pargs)
    


