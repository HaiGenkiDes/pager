#!/usr/bin/env python

#stdlib imports
import argparse
import sys
import os.path
from urllib.parse import urlparse

#local imports
from losspager.schema import emailschema
from losspager.utils.config import read_mail_config
from losspager.utils.datapath import get_data_path


def add_user(session):
    name_prompt = "Enter the user's first and last name, separated by spaces: "
    username = input(name_prompt)
    first,last = username.split()
    org_prompt = "Enter the user's organization (short name): "
    org_short = input(org_prompt)
    org = session.query(emailschema.Organization).filter(emailschema.Organization.shortname==org_short).first()
    if org is None:
        msg = 'Could not find an organization called %s.  Add using --add-org.' % org_short
        return (False,msg)
    user = emailschema.User(last,first)
    user.organization = org
    do_address = True
    schemes = session.query(emailschema.AlertScheme).all()
    region_groups = session.query(emailschema.RegionGroup).all()
    while do_address:
        address_prompt = 'Enter an email address for this user (or enter to stop adding addresses): '
        email = input(address_prompt).strip()
        if email != '':
            address = emailschema.Address()
            address.email = email
            address.user = user
            if len(user.addresses) == 0:
                address.is_primary = True
            else:
                address.is_primary = False
        do_profile = True
        while do_profile:
            profile = emailschema.Profile()
            for scheme in schemes:
                scheme_prompt = 'Should this user use the %s scheme[no]/yes? ' % scheme.name
                scheme_answer = input(scheme_prompt)
                if scheme_answer == '':
                    continue
                if scheme.name == 'mag':
                    mag_answer = float(input('Enter the magnitude threshold (0-9.9)[7.0]: '))
                    if not validate_mag(mag_answer):
                        msg = 'Invalid magnitude.'
                        return (False,msg)
                    mag_threshold = emailschema.Threshold()
                    mag_threshold.alertscheme = scheme
                    mag_threshold.value = mag_answer
                    profile.thresholds.append(mag_threshold)
                elif scheme.name == 'eis':
                    eis_answer = input('Enter the EIS threshold (green,yellow,orange,red)[yellow]: ')
                    if eis_answer not in ['green','yellow','orange','red']:
                        msg = 'Invalid EIS threshold.'
                        return (False,msg)
                    eis_threshold = emailschema.Threshold()
                    eis_threshold.alertscheme = scheme
                    eis_threshold.value = eis_answer
                    profile.thresholds.append(eis_threshold)
                elif scheme.name == 'mmi':
                    mmi_answer = float(input('Choose the MMI threshold (0-10)[7]: '))
                    if not validate_mmi(mmi_answer):
                        msg = 'Invalid MMI value.'
                        return (False,msg)
                    mmi_threshold = emailschema.Threshold()
                    mmi_threshold.alertscheme = scheme
                    mmi_threshold.value = mmi_answer
                    profile.thresholds.append(mmi_threshold)
                    
            for region_group in region_groups:
                group_prompt = 'Would you like to select a region from %s[no]/yes? ' % region_group.groupname
                group_answer = input(group_prompt).strip()
                if group_answer == '':
                    continue
                gid = region_group.id
                regions = session.query(emailschema.Region).filter(emailschema.Region.regiongroup_id == gid).all()
                for region in regions:
                    region_prompt = 'Use region %s [no]/yes? '
                    region_answer = input(region_prompt).strip()
                    if region_answer == '':
                        continue
                    profile.regions.append(region)
            do_address = input('Do you want to enter another address [no]/yes? ')
            
                    

            address.profiles.append(profile)
            more_profiles = input('Do you need to add another profile [no]/yes? ').strip()
            if more_profiles == '':
                do_profile = False
            else:
                do_profile = True
        session.commit()
        msg = 'The user %s has now been entered in the database.' % user
        return (True,msg)

def init_db(db_url):
    jsonfile = get_data_path('mail_init.json')
    session = emailschema.create_db(db_url,jsonfile,create_db=True)
    session.close()
    return (True,'Empty database created successfully.')    
    
def main(args):
    config = read_mail_config()
    dburl = config['email']['database']['url']
    create = False
    parts = urlparse(dburl)
    dbfile = parts.path[1:]
    if not os.path.isfile(dbfile):
        create = True
    session = emailschema.get_session(url=dburl,create_db=create)

    if args.init_db:
        res,msg = init_db(dburl)
    
    if args.add_user:
        res,msg = add_user(session)
    
    if args.add_org:
        shortname = args.add_org[0]
        longname = ' '.join(args.add_org[1:])
        org = emailschema.Organization(name=longname,shortname=shortname)
        session.add(org)
        session.commit()
        msg = 'Organization %s has been added to the database.' % org
        res = True

    if args.list_org:
        orgs = session.query(emailschema.Organization).all()
        for org in orgs:
            print('%-40s (%s)' % (org.name,org.shortname))
        res = True
        msg = ''

    session.close()
    print(msg)
    if not res:
        sys.exit(1)
    sys.exit(0)

if __name__ == '__main__':
    #--add-user Prompts for all user, address, profile information
    #--add-generic org last first email1 email2...
    desc='Administer the PAGER email database.'
    usage = '''
    To add a user to the database: "%(prog)s --add-user"
    '''
    argparser = argparse.ArgumentParser(description=desc,
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        usage=usage)
    argparser.add_argument("--add-user", action='store_true',default=False,
                           help='Add a user by following prompts.')
    argparser.add_argument("--add-org", nargs='*', 
                           help='Add an organization by entering short name (one word) followed by full name.')
    argparser.add_argument("--list-org", action='store_true',default=False,
                           help='Add a user by following prompts.')
    argparser.add_argument("--init-db", action='store_true',default=False,
                           help='Recreate the database file.  Mostly used for debugging.')
    pargs = argparser.parse_args()
    main(pargs)
    


