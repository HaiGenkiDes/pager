#!/usr/bin/env python

#stdlib imports
import argparse
import sys
import configparser
import os.path
import datetime
import collections
import zipfile
import shutil
import glob
import re
from operator import attrgetter
from calendar import monthrange

#local imports
from losspager.utils.config import read_config,write_config
from losspager.io.pagerdata import PagerData
from losspager.utils.admin import PagerAdmin,RemoteAdmin
from losspager.utils.exception import PagerException

#third party imports
from impactutils.io.cmd import get_command_output
from impactutils.textformat.text import pop_round_short,dollar_round,round_to_nearest,commify
import pandas as pd

DATEFMT = '%Y-%m-%d'
DATETIMEFMT = '%Y-%m-%d %H:%M:%S'
NDAYS = 7
MAX_DAYS = 300*365 #maximum number of days to do queries for events
PAGER_SCRIPT = 'runpager.py' #this is a system call hack until I can refactor runpager to export a run function
TIMEFMT = '%Y-%m-%d %H:%M:%S'
HDRDICT = collections.OrderedDict([('ID','%-10s'),
                                  ('Ver','%-3s'),
                                  ('Time','%-19s'),
                                  ('Mag','%-4s'),
                                  ('Depth','%-8s'),
                                  ('Level','%-7s'),
                                  ('MMI','%-3s'),
                                  ('Tsunami?','%-8s'),
                                  ('Stopped?','%-8s'),
                                  ('Location','%-42s')])

LEVELS = {'green':0,
          'yellow':1,
          'orange':2,
          'red':3}

def order_event_data(event_data,sort_by=('time',)):
    if not isinstance(sort_by,tuple):
        raise PagerException('sort_by option must be a tuple of strings.')
    sort_options = ('time','magnitude','alert','processing_time')
    for option in sort_by:
       if option not in sort_options:
           raise PagerException('Sort option %s not allowed.' % option)
    event_data = sorted(event_data,key=attrgetter(*sort_by))
    return event_data

def archive_event(event,archive_folder,output_folder):
    eventfolder = get_event_folder(event,output_folder)
    if eventfolder is None:
        return False
    zipname = os.path.join(archive_folder,event+'.zip')
    myzip = zipfile.ZipFile(zipname,mode='w',compression=zipfile.ZIP_DEFLATED)
    for root,dirs,files in os.walk(eventfolder):
        arcfolder = root[root.find(event):]
        for fname in files:
            arcfile = os.path.join(arcfolder,fname)
            fullfile = os.path.join(root,fname)
            myzip.write(fullfile,arcfile)

    myzip.close()
    shutil.rmtree(eventfolder)
    return True

def is_date(datestr):
    try:
        datetime.datetime.strptime(datestr,DATETIMEFMT)
    except:
        try:
            datetime.datetime.strptime(datestr,DATEFMT)
        except:
            return False
    return True

def query_events_since(outfolder):
    pass

def get_all_events(outfolder):
    allevents = os.listdir(outfolder)
    events = []
    for event in allevents:
        if os.path.isdir(os.path.join(outfolder,event)):
            events.append(event)
    return events

def get_event_data(eventfolder):
    data_blobs = []
    for versionfolder in glob.glob(os.path.join(eventfolder,'version.*')):
        jsonfolder = os.path.join(versionfolder,'json')
        vdata = PagerData()
        vdata.loadFromJSON(jsonfolder)
        data_blobs.append(vdata)
    return data_blobs

def get_date(datestr):
    archdate = None
    try:
        archdate = datetime.datetime.strptime(datestr,DATETIMEFMT)
    except:
        try:
            archdate = datetime.datetime.strptime(datestr,DATEFMT)
        except:
            pass
    return archdate

def do_archive(archive_info,archive_threshold,admin):
    archive_date = get_date(archive_info[0])
    if archive_info[0] == 'all':
        narchived,nerrors = admin.archive(all_events=True)
    elif archive_info[0] == 'auto':
        narchived,nerrors = admin.archive(events_before=archive_threshold)
    elif archive_date is not None:
        narchived,nerrors = admin.archive(events_before=archive_date)
    else:
        narchived,nerrors = admin.archive(events=archive_info)
    return (narchived,nerrors)


def do_release(eventid,admin):
    #find the most recent version of PAGER for this event
    event_folder = admin.getEventFolder(eventid)
    if event_folder is None:
        print('No event %s found.  Exiting.' % eventid)
        sys.exit(1)
    version = admin.getLastVersion(event_folder)
    xmlfile = os.path.join(version,'grid.xml')
    if not os.path.isfile(xmlfile):
        print('No grid.xml file found for %s.  Exiting.' % eventid)
        sys.exit(1)
    homedir = os.path.dirname(os.path.abspath(__file__)) #where is this script?
    pagerpath = os.path.join(homedir,'pager')
    pager_cmd = '%s --release %s' % (pagerpath,xmlfile)
    res,stdout,stderr = get_command_output(pager_cmd)
    if not res:
        msg = 'Release process failed on event %s.  "%s" "%s"' % (eventid,stdout,stderr)
    else:
        msg = 'Release of event %s successful with message "%s".' % (eventid,stdout)
    return (res,msg)

def do_status(status,admin):
    current_status = admin.getStatus()
    if status == 'check':
        if current_status == 'primary':
            msg = 'PRIMARY: This system WILL transfer products.'
        else:
            msg = 'SECONDARY: This system WILL NOT transfer products.'
    else:
        if status == current_status:
            msg = 'System status is already %s.' % current_status
        else:
            new_status = admin.setStatus(status)
            if new_status == 'primary':
                fmt = 'System status changed to %s - this system is now configured to transfer products.'
            else:
                fmt = 'System status changed to %s - this system is now configured to NOT transfer products.'
            msg = fmt % new_status
    return msg

def do_stats(stats,admin,config):
    if 'stats_folder' not in config.keys():
        print('Configure the stats_folder variable first.')
        sys.exit(1)
    if not os.path.isdir(config['stats_folder']):
        print('stats_folder %s does not exist.' % (config['stats_folder']))
        sys.exit(1)
    tnow = datetime.datetime.utcnow()
    this_month = tnow.month
    if stats[0] == 'month':
        #go get the last full month's worth of pager results.
        query_month = this_month - 1
        query_year = tnow.year
        if query_month == 0:
            query_month = 12
            query_year = tnow.year - 1
        ndays = monthrange(query_year,query_month)[1]
        start_date = datetime.datetime(query_year,query_month,1)
        end_date = datetime.datetime(query_year,query_month,ndays,23,59,59)
        fname = 'monthly_%i_%i.xlsx' % (query_year,query_month)
    elif stats[0] == 'quarter':
        this_quarter = (tnow.month-1)//3
        last_quarter = this_quarter - 1
        if last_quarter == -1:
            query_year = tnow.year - 1
        quarters = {0:(1,3),
                    1:(4,6),
                    2:(7,9),
                    3:(10,12)}

        end_month_days = monthrange(query_year,quarters[last_quarter][1])
        start_date = datetime.datetime(query_year,quarters[last_quarter][0],1)
        end_date = datetime.datetime(query_year,quarters[last_quarter][1],end_month_days,23,59,59)
        fname = 'quarterly_%i_Q%i.xlsx' % (query_year,(last_quarter+1))
    elif stats[0] == 'year':
        query_year = tnow.year - 1
        start_date = datetime.datetime(query_year,1,1)
        end_date = datetime.datetime(query_year,12,31,23,59,59)
        fname = 'yearly_%i.xlsx' % (query_year)
    else:
        msg = 'Unsupported stats period %s.' % stats[0]
        res = False
    pdataframe = admin.query(start_time=start_date,
                             end_time=end_date,
                             mag_threshold=0.0,
                             alert_threshold='green',
                             version='all')
    statsfile = os.path.join(config['stats_folder'],fname)
    pdataframe.to_excel(statsfile)
    msg = 'All event statistics saved to %s.' % statsfile
    res = True
    return (res,msg)

def do_query(query,output,admin):
    msg = ''
    pd.set_option('display.width', 1000)
    pd.set_option('display.max_rows', 1000)
    start_date = get_date(query[0])
    end_date = datetime.datetime(3000,1,1) #some scenarios are in the future.  Sigh.
    mag_threshold = 0.0
    alert_threshold = 'green'
    version = 'last'
    qsyntax = 'query syntax: [START/all [MAG [ALERT [END [VERSION]]]]]. '
    if start_date is None:
        start_date = datetime.datetime(1800,1,1)
    else:
        if len(query) >= 2:
            try:
                mag_threshold = float(query[1])
                assert mag_threshold >= 0 and mag_threshold <= 10.0
            except:
                msg = qsyntax+'Second argument must be a magnitude [0-10].'
                res = False
        if len(query) >= 3:
            alert_threshold = query[2]
            if alert_threshold not in ['green','yellow','orange','red']:
                msg = qsyntax+'Fourth argument must be one of (green,yellow,orange,red).'
                res = False
        if len(query) >= 4:
            end_date = get_date(query[3])
            if end_date is None:
                msg = qsyntax+'Third argument must be a date/time string.'
                res = False
        if len(query) >= 5:
            version = query[4]
            if version not in ['first','last','eight','all']:
                msg = qsyntax+'Fifth argument must be one of (first,last,eight,all).'
                res = False

    pdataframe = admin.query(start_time=start_date,end_time=end_date,
                             mag_threshold=mag_threshold,
                             alert_threshold=alert_threshold,
                             version=version)
    if output == 'screen':
        if len(pdataframe):
            print(pdataframe)
        else:
            print('No events on filesystem.')
        res = True
    else:
        fpath,fname = os.path.split(output)
        if not os.path.isdir(fpath):
            msg = 'Cannot create %s in %s - directory does not exist.' % (fname,fpath)
            res = False
        pdataframe.to_excel(output)
        msg = '%i rows written to %s.' % (len(pdataframe),output[0])
        res = True
    return (res,msg)

def main(args):
    #Get config file loaded
    config = read_config()
    
    #figure out where the output data goes
    pager_folder = config['output_folder']

    #figure out where the archive folder is
    archive_folder = config['archive_folder']

    #figure out auto archive threshold
    archive_threshold_days = config['archive_older_than']
    archive_threshold = datetime.datetime.utcnow() - datetime.timedelta(days=archive_threshold_days)

    #if we're on a laptop, then status should not be set in the config at all
    if 'status' not in config:
        if 'pdl' in config:
            admin = RemoteAdmin(config['pdl'])
            action = ''
            eventid = ''
            if args.release:
                action = 'release'
                eventid = args.release
            if args.status:
                action = 'switch-status'
            if args.cancel:
                action = 'cancel'
                eventid = args.cancel
            if args.renotify:
                action = 'renotify'
                eventid = args.renotify
            if args.stop:
                action = 'stop'
                eventid = args.stop
            if args.unstop:
                action = 'unstop'
                eventid = args.unstop
            if action != '':
                print('You are not on a primary system, but have PDL configured.  Trying remote admin actions...')
                res,stdout,stderr = admin.sendAction(action,eventid)
                if not res:
                    print('Sending remote action %s failed. "%s", %s".' % (action,stdout,stderr))
                    sys.exit(1)
                else:
                    print('Successfully sent remote action %s. "%s".' % (action,stdout))
                    sys.exit(0)
                
    
    admin = PagerAdmin(pager_folder,archive_folder)

    if args.stop:
        result,eventfolder = admin.stop(args.stop)
        if result:
            print('A "stop" file was placed in %s.' % (eventfolder))
        else:
            print('"stop" file already exists in %s.' % (eventfolder))
        sys.exit(0)

    if args.unstop:
        result,eventfolder = admin.unstop(args.unstop)
        if result:
            print('A "stop" file was removed from %s.' % (eventfolder))
        else:
            print('No "stop" file was found in %s.' % (eventfolder))
        sys.exit(0)

    if args.archive:
        narchived,nerrors = do_archive(args.archive,config['archive_older_than'],admin)
        print('%i events archived to %s, %i errors' % (narchived,archive_folder,nerrors))
        sys.exit(0)

    if args.release:
        res,msg = do_release(args.release,admin)
        print(msg)
        if not res:
            sys.exit(1)
        else:
            sys.exit(0)
          
    if args.restore:
        if args.restore[0] == 'all':
            nrestored = admin.restore(all_events=True)
        else:
            nrestored = admin.restore(events=args.restore)
        print('%i events restored to %s' % (nrestored,pager_folder))
        sys.exit(0)

    if args.status is not None:
        msg = do_status(args.status,admin)
        print(msg)
        sys.exit(0)

    if args.history:
        pdataframe = admin.query(eventid=args.history)
        print(pdataframe)
        sys.exit(0)

    if args.tsunami:
        if args.tsunami[1] not in ['on','off']:
            print('Tsunami syntax: adminpager --tsunami EVENT on/off')
            sys.exit(1)
        result = pdataframe = admin.toggleTsunami(args.tsunami[0],args.tsunami[1])
        print('Tsunami status has been set to %s for event %s' % (args.tsunami[1],args.tsunami[0]))
        sys.exit(0)

    if args.stats:
        res,msg = do_stats(args.stats,admin,config)
        print(msg)
        if not res:
            sys.exit(1)
        else:
            sys.exit(0)
            
    if args.query:
        res,msg = do_query(args.query,args.output,admin)
        print(msg)
        if res:
            sys.exit(0)
        else:
            sys.exit(1)
    
if __name__ == '__main__':
    desc='Administer the PAGER system with a series of subcommands.'
    usage = '''
    To query the system status: "adminpager --status"
    To switch the system from being primary to secondary: "adminpager --status secondary"
    To switch the system from being secondary to primary: "adminpager --status primary"
    To prevent an event from being automatically updated: "adminpager --stop EVENTID"
    To re-allow an event to be automatically updated: "adminpager --unstop EVENTID"
    To archive an event: "adminpager --archive EVENTID"
    To delete ALL events:"adminpager --archive all"
    To release an event: "adminpager --release EVENTID"
    To toggle the tsunami flag ON for an event: "adminpager --tsunami EVENTID on"
    To toggle the tsunami flag OFF for an event: "adminpager --tsunami EVENTID off"
    To print a list of the events from the last 7 days: "adminpager --recent"
    To see the version history of an event: "adminpager --history EVENTID"
    Query Syntax:
    All events from December 15, 2015: adminpager --query 2015-12-15
    M5.5+ events from December 15, 2016: adminpager --query 2015-12-15 5.5
    All Yellow events > M5.5: adminpager --query 1900-01-01 5.5 yellow
    Yellow events > M5.5 until November 15, 2016: adminpager --query 1900-01-01 5.5 yellow 2016-11-15
    First version of yellow events > M5.5 until November 15, 2016: adminpager --query 1900-01-01 5.5 yellow 2016-11-15 first
    Last version of yellow events > M5.5 until November 15, 2016: adminpager --query 1900-01-01 5.5 yellow 2016-11-15 last
    All versions of yellow events > M5.5 until November 15, 2016: adminpager --query 1900-01-01 5.5 yellow 2016-11-15 all
    First version of yellow events > M5.5 created 8+ hours after origin, until November 15, 2016: adminpager --query 1900-01-01 5.5 yellow 2016-11-15 eight
    '''
    argparser = argparse.ArgumentParser(description=desc,
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        usage=usage)
    archive_str = '''Archive event(s) from file system. Passing "all" as an argument 
    will archive all events, passing "auto" will archive events based on pre-configured 
    number of days previous to current date, passing a date (YYYY-mm-dd) will archive
    all events prior to that date.'''
    argparser.add_argument("--archive", nargs='*',
                           help=archive_str,metavar='EVENT')
    argparser.add_argument("--restore", nargs='*',
                           help='Restore events from archive.  Passing "all" will restore all events from the archive.',metavar='EVENT')
    argparser.add_argument("--stop", nargs=1,
                           help="Prevent event(s) from being re-run automatically.",
                           metavar='EVENT')
    argparser.add_argument("--unstop", nargs=1,
                           help="Allow stopped event(s) to be re-run automatically.",
                           metavar='EVENT')
    argparser.add_argument("--status", nargs=1,choices=('check','primary','secondary'),
                           help="Print or change PAGER primary/secondary status.",
                           metavar='STATUS')
    argparser.add_argument("--tsunami", nargs=2,
                           help="Toggle tsunami warning on PAGER alert",
                           metavar=('EVENT','on/off'))
    argparser.add_argument('--query',nargs='*',metavar='PARAM',
                           help="List events that match the query. Params are [START/all [MAG [ALERT [END [VERSION]]]]].")
    argparser.add_argument("--history", nargs=1,
                           help="Print history of input event.",
                           metavar='EVENT')
    argparser.add_argument("--output", nargs='*', 
                           help="Select output format for queries ('screen' or excel filename.",
                           default='screen',metavar='FORMAT')
    argparser.add_argument("--stats", nargs=1, 
                           help="Create dump of monthly, quarterly, or yearly PAGER results.",
                           choices = ('month','quarter','year'),metavar='PERIOD')
    argparser.add_argument("--release", nargs=1,
                           help="Release orange/red alert level event.",
                           metavar='EVENT')
    argparser.add_argument("--renotify", nargs=1,
                           help="Renotify users about an event.",
                           metavar='EVENT')
    argparser.add_argument("--cancel", nargs=1,
                           help="Cancel event.",
                           metavar='EVENT')
    
    # argparser.add_argument("--renotify", nargs=1,
    #                        help="Send renotify message to ENS for given event.",
    #                        metavar='EVENT')
    
    
    # argparser.add_argument('--recent',action="store_true",default=False,
    #                        help="List events that have occurred within the last %i days" % NDAYS)

    # argparser.add_argument('--ofda',metavar='NDAYS',type=int,
    #                        help="""List events that are likely to have caused alerts on ANY version
    # of an event (EIS Yellow+, MMI 7+, Mag 7+) within the last NDAYS.""")
    # argparser.add_argument("--history", nargs=1,
    #                        help="Print PAGER event history.",
    #                        metavar='EVENT')
    
    

    args = argparser.parse_args()
    main(args)

    
                           
